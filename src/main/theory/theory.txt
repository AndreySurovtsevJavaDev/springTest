1. Что такое Spring Boot? Какие преимущества он даёт?

    Spring Boot - я бы сказал, что это надстройка над Spring, которая берёт на себя всю работу по конфигурации приложения и
является диспетчером зависимостей.

    Преимущества:
        - Простота управления зависимостями (не надо руками обновлять конкретные версии зависимостей, spring boot сделает всё сам)
        - Автоконфигурация. Автоматически регистрирует и конфигурирует бины стартер-паков.
        - Встроенный веб-сервер. Не надо беспокоиться о настройке контейнера сервлетов.

-----------------------------------------------------------------------------------------------------------------------

2. Объясните, что такое Dependency Injection (DI).

    Технология DI состоит в том, что фреймворк устанавливает связь между бинами и присваивает значение
определённому полю или параметру

    Связи между бинами - это когда один бин получает ссылку на другой и может делегировать ему вызовы.

-----------------------------------------------------------------------------------------------------------------------

3. Что такое Spring Context?

    Spring Context Это место (нечто вроде контейнера) в памяти приложения, куда помещаются экземпляры объектов управляемые фреймворком

-----------------------------------------------------------------------------------------------------------------------

4. Для чего нужна аннотация @SpringBootApplication?

    Аннотация @SpringBootApplication объявляет, что данный класс является главным классом приложения Spring Boot

    SpringBootApplication - это комбинация из 3 других аннотаций:
        - @Configuration: - про неё позже, но коротко: индикатор класса-источника бинов
        - @EnableAutoConfiguration: - Указывает Spring Boot автоматически настраивать бины и параметры на основе зависимостей проекта
        - @ComponentScan: Сканирует компоненты Spring (такие как @Controller, @Service, @Repository и т. д.)
-----------------------------------------------------------------------------------------------------------------------

5. Что такое @RestController и чем он отличается от @Controller?

    Аннотация @RestController заменяет сочетание @Controller + @ResponseBody

    Чем отличается от @Contoller:
    - Для аннотации @Controller необходимо снабжать каждый метод аннотацией @ResponseBody, что множит некоторое количество
дублированного кода, которого стараются избегать. @RestController как раз и позволяет избежать лишнего дублирования

-----------------------------------------------------------------------------------------------------------------------

6. Объясните назначение аннотации @Autowired.

    Аннотация @Autowired позволяет автоматически внедрять необходимые зависимости во время выполнения программы,
используя механизм DI.
    Отмечается это свойство непосредственно в классе, характеризующем объект, куда нужно внедрить зависимость, без необходимости
создания отдельного экземпляра зависимого объекта.

-----------------------------------------------------------------------------------------------------------------------

7. Что такое @RequestMapping? Какие параметры можно задать?

    С помощью аннотации @RequestMapping привязывается действие к пути http-запроса по сути, это маппинг URL на метод\

-----------------------------------------------------------------------------------------------------------------------

8. Что такое @Component, @Service, @Repository? В чём разница?

    Всё это стереотипные аннотации.
    @Component - это простейшая стереотипная аннотация для любого бина.
Стереотипные аннотации размещаются над классами экземпляр которого мы хотим добавить в контекст Spring
Таким образом, мы сообщаем Spring, что данный класс является компонентом

    @Service - Специализированная @Component для классов реализующих бизнес-логику

    @Repository - Специализированная @Component для классов реализующих работу с БД.

    В отличие от @Component дают дополнительную информацию об обязанностях реализуемого объекта
    В контексте сервисов, основная задача - это реализация сценариев использования
    В контексте репозиториев, основная задача - это сохранять данные

-----------------------------------------------------------------------------------------------------------------------

9. Что такое application.properties? Приведите примеры настроек.

    По сути это файл (я только YAML пока использовал), в котором хранятся все настройки приложения как для внутреннего использования, так и для связи с внешними
приложениями (БД, например). И к этим настройкам приложение обращается в процессе использования.

# Настройки PostgreSQL
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost:5432/springTest
spring.datasource.username=postgres
spring.datasource.password=123

# Настройки Liquibase
spring.liquibase.change-log=classpath:db/changelog/changelog.xml
# Включение Liquibase
spring.liquibase.enabled=true

-----------------------------------------------------------------------------------------------------------------------

10. Как работает Spring Data JPA? Какие интерфейсы вы знаете?

    Spring Data JPA предлагает упрощенный контракт для исполнения CRUD-операций и создания запросов на основе имён методов
    Т.е не нужно писать нативные SQl-запросы, а достаточно правильно задавать методам имена и фреймворк преобразует их сам
    в нужный вид для любой СУБД.

    интерфейсы:
    - JpaRepository - Наиболее абстрактный контракт. Если его расширить, то приложение распознает интерфейс, написанный как любой репозиторий Spring Data.
    - CrudRepository - Простейший контракт, который предоставляет некоторые функции по взаимодействию с сохранёнными данными.
    Если его расширить, то станут доступны простейшие функции CRUD.
    - PagingAndSortingRepository - расширяет CrudRepository. Добавляет операции сортировки и чтения определённого количества записей (пагинация)

-----------------------------------------------------------------------------------------------------------------------

11. Что такое @Transactional? Зачем оно нужно?

    Используется для обозначения транзакций.
    Транзакции у нас выполняются на основе аспектов (АОП) и являются Атомарными, т.е либо выполняется весь набор изменяющих операций,
 либо не выполняются вообще и приложение возвращается в состояние до начала выполнения операции.

-----------------------------------------------------------------------------------------------------------------------

12. Как настроить подключение к базе данных в Spring Boot?

    В приложениях java функционал языка для соединения с реляционной базой данных называется Java Database Connectivity (JDBC)
Но в JDK нет отдельных реализаций для работы с конкретными технологиями (MySQL, Postgres, и т.д).
JDK только предоставляет абстракции объектов, необходимых приложению для соединения с БД.
Чтобы получить реализацию нужно подключать JDBC-драйвер конкретной СУБД (каждая даёт свой) - таким образом устанавливается real-time зависимость

    Так же, будет необходимо в application.properties прописать настройки подключения

-----------------------------------------------------------------------------------------------------------------------

13. Что такое Spring Security? Для чего он используется?

    Spring Security это фреймворк для реализации контроля доступов к ресурсам, с которыми работает приложение.

    Используется для:
        - аутентификации
        - авторизации
        - защиты от CSRF
        - защиты от CORS


-----------------------------------------------------------------------------------------------------------------------

14. Что такое @Configuration и @Bean? Приведите пример.

    Аннотацией @Configuration мы помечаем класс конфигурации, в котором мы сообщаем Spring об экземплярах объектов,
которые должны стать бинами

    Аннотация @Bean сообщит Spring о том, что при инициализации контекста нужно вызвать метод помеченный этой аннотацией
и добавить возвращённое им значение в конекст.

Пример, на попугаях:
@Configuration
public class ProjectConfig {

   @Bean
   Parrot parrot() {
       // создаём экземпляр объекта и помещаем его в контекст
       var parrot = new Parrot();
       parrot.setName("Koko");
       return parrot;                  // Spring добавляет в контекст экземпляр класса Parrot, возвращаемый методом.
   }
}

-----------------------------------------------------------------------------------------------------------------------

15. Как добавить логирование в Spring Boot?

   Можно добавить логгеры. Каких-то более серьёзных способов пока не знаю)

   private static Logger logger =
           Logger.getLogger(PaymentController.class.getName());
